#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var fs = require('fs');
var pg = require('pg');
var path = require('path');
var connectionString = process.env.DATABASE_URL || 'postgres://localhost:5432/user';


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

io.on('connection', function(socket){
   var userid = socket.id;
   var username = 'isa';
   var uservalue = 0.00003410340;
   var results = [];

   console.log('dummy user connected');
   socket.emit('hello', 'System Broadcast Message: a dummy user has been connected');
   socket.on('disconnect', function(){
      console.log('user disconnected');
   });

   socket.on('image', function(obj){
     var img = obj.image;
     var ext = img.split(';')[0].match(/jpeg|png|gif/)[0];
     var data = img.replace(/^data:image\/\w+;base64,/, "");
     var buf = new Buffer(data, 'base64');
     var filepath = 'public/images/' + userid + '.' + ext
     fs.writeFile(filepath, buf);
     console.log('It\'s saved!');

     // save user data to database
     pg.connect(connectionString, function(err, client, done) {
       // Handle connection errors
       if(err) {
        done();
        console.log('errrrrr: '+err);
       }

       // SQL Query > Insert Data
       client.query('INSERT INTO items(id, name, url, value, rank) values($1, $2, $3, $4, $5)',
       [userid, username, filepath, uservalue, 1]);
       // SQL Query > Select Data
       var query = client.query('SELECT * FROM items ORDER BY rank ASC');
       // Stream results back one row at a time
       query.on('row', function(row) {
          results.push(row);
       });
        // After all data is returned, close connection and return results
       query.on('end', function() {
          socket.emit('leaderboard', results);
          done();
          // do something with the results
          console.log(results)
       });
     });

    });
});

server.listen(port, function(){
  console.log('listening on port 3000');
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
